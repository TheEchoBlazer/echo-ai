<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>Echo — On-Page AI (No Key)</title>
<style>
  :root{ --bg:#0b0f14; --ink:#e9eef7; --muted:#a8b3c6; --line:#223048; --hi:#6ee7ff; --hi2:#8b5cf6; }
  *{box-sizing:border-box}
  body{margin:0;background:#0b0f14;color:var(--ink);font:14px/1.5 system-ui,Segoe UI,Roboto,Arial}
  .wrap{max-width:860px;margin:0 auto;padding:14px}
  .hdr{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:10px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:26px;height:26px;border-radius:8px;background:conic-gradient(from 0deg,var(--hi),var(--hi2),var(--hi));box-shadow:0 0 20px #6ee7ff55 inset,0 0 28px #8b5cf655}
  .t1{margin:0;font-size:16px;font-weight:700}
  .sub{font-size:12px;color:var(--muted)}
  .bar{display:flex;gap:8px;flex-wrap:wrap}
  select,button,textarea{border-radius:10px;border:1px solid var(--line);background:#0e1626;color:var(--ink);outline:none}
  select{padding:8px 10px}
  button{padding:9px 12px;background:linear-gradient(90deg,var(--hi2),var(--hi));color:#061019;font-weight:700;border:none;cursor:pointer}
  button:disabled{opacity:.6;cursor:not-allowed}
  .status{font-size:12px;color:#a0abc0}
  .card{background:rgba(14,20,32,.85);border:1px solid var(--line);border-radius:14px;overflow:hidden}
  .chat{height:60vh;min-height:360px;overflow:auto;padding:12px}
  .row{display:flex;gap:10px;margin:10px 0}
  .me{justify-content:flex-end}
  .msg{max-width:80%;padding:10px 12px;border:1px solid var(--line);border-radius:12px;white-space:pre-wrap;word-wrap:anywhere}
  .mine{background:#1b2742}
  .theirs{background:#141b2c}
  .code{display:block;background:#0b1120;border:1px solid #1a2742;border-radius:10px;padding:8px;overflow:auto;margin:8px 0}
  .toolbar{display:flex;gap:8px;padding:10px;border-top:1px solid var(--line);background:#0d1424}
  textarea{flex:1 1 auto;min-height:56px;max-height:180px;resize:vertical;padding:10px 12px}
  .hint{color:var(--muted);font-size:12px;margin-top:8px}
  .chips{display:flex;gap:8px;flex-wrap:wrap;margin-top:8px}
  .chip{padding:6px 10px;border:1px solid var(--line);background:#0e1420;border-radius:999px;color:#muted;cursor:pointer}
</style>
</head>
<body>
<div class="wrap">
  <div class="hdr">
    <div class="brand">
      <div class="logo"></div>
      <div>
        <p class="t1">Echo — On-Page AI (No Key)</p>
        <div class="sub">Skript/SkBee 1.21.x + Gorilla Tag / Unity 2021.3.21f1</div>
      </div>
    </div>
    <div class="bar">
      <select id="model">
        <option value="Phi-3.5-mini-instruct-q4f16_1-MLC">Phi-3.5-mini-instruct (smallest & fastest)</option>
        <option value="Qwen2.5-Coder-1.5B-Instruct-q4f16_1-MLC">Qwen2.5-Coder-1.5B-Instruct (better for code)</option>
        <option value="Llama-3.1-3B-Instruct-q4f16_1-MLC">Llama-3.1-3B-Instruct</option>
      </select>
      <button id="load">Load Model</button>
    </div>
  </div>

  <div class="status" id="status">Pick a model → <b>Load Model</b>. First load downloads once, then caches.</div>

  <div class="card" style="margin-top:10px">
    <div id="chat" class="chat"></div>
    <div class="toolbar">
      <textarea id="in" placeholder="e.g., “Skript: /dupe up to 4; block &cHeart; 5s cooldown; perm echo.dupe.”"></textarea>
      <button id="send" disabled>Send</button>
    </div>
  </div>

  <div class="chips">
    <div class="chip" data-text="Skript: command /dupe that duplicates held item up to 4; deny if item's name contains &cHeart or if custom model data is 123. Include cooldown 5s and permission echo.dupe.">/dupe up to 4 + block hearts</div>
    <div class="chip" data-text="Skript: 'Quacke Mace' with right-click wind burst (level 5), shift-right-click ground slam; base damage ~9 hearts; only one exists server-wide; crafting recipe; admin bypass perm quacke.admin.">Quacke Mace</div>
    <div class="chip" data-text="Unity (GTag): C# MonoBehaviour that toggles Ghost Monkey + Snowball Spam via wrist UI; Photon PUN 2 safe RPCs.">GTag wrist toggle</div>
  </div>

  <p class="hint">No server, no key. If it’s sluggish, pick the smallest model.</p>
</div>

<!-- WebLLM UMD build -->
<script src="https://cdn.jsdelivr.net/npm/@mlc-ai/web-llm@0.2.55/dist/web-llm.umd.min.js"></script>
<script>
const $ = s => document.querySelector(s);
const statusEl = $("#status"), chatEl = $("#chat"), inputEl = $("#in");
const sendBtn = $("#send"), modelEl = $("#model"), loadBtn = $("#load");

let engine = null;
const history = [
  { role: "system", content:
`You are a focused coding helper for Minecraft Skript (Minehut/Purpur/1.21.x, SkBee) and Gorilla Tag/Unity 2021.3.21f1 (Photon PUN 2, PlayFab).
Rules:
- Return code in triple backticks with language tags: \`\`\`skript\`\`\`, \`\`\`csharp\`\`\`, \`\`\`json\`\`\`, etc.
- Skript: include permissions, simple cooldowns, deny messages; avoid deprecated syntaxes.
- Unity: include needed 'using' lines; keep snippets drop-in; explain only critical setup.
- If a request is unsafe or against platform rules, refuse briefly and suggest a safer alternative.
- Be concise.`}
];

function escapeHtml(s){ return String(s).replace(/[<>&]/g, c => ({'<':'&lt;','>':'&gt;','&':'&amp;'}[c])); }
function renderMarkdownLite(t){
  const parts = String(t).split(/```/);
  let out = "";
  for (let i=0;i<parts.length;i++){
    if (i%2===0){ out += escapeHtml(parts[i]).replace(/\n/g,"<br>"); }
    else{
      const nl = parts[i].indexOf("\n");
      let lang="txt", code=parts[i];
      if(nl!==-1){ lang = parts[i].slice(0,nl).trim() || "txt"; code = parts[i].slice(nl+1); }
      out += `<pre class="code"><code data-lang="${lang}">${escapeHtml(code)}</code></pre>`;
    }
  }
  return out;
}
function addBubble(role, text){
  const row = document.createElement("div");
  row.className = "row" + (role==="user" ? " me" : "");
  const msg = document.createElement("div");
  msg.className = "msg " + (role==="user" ? "mine" : "theirs");
  msg.innerHTML = renderMarkdownLite(text);
  row.appendChild(msg); chatEl.appendChild(row);
  chatEl.scrollTop = chatEl.scrollHeight;
}
function setStatus(m){ statusEl.innerHTML = m; }

loadBtn.addEventListener("click", async ()=>{
  const modelId = modelEl.value;
  setStatus(`Loading <b>${escapeHtml(modelId)}</b>…`);
  sendBtn.disabled = true;
  try {
    const { CreateMLCEngine, prebuiltAppConfig } = window.webllm;
    engine = await CreateMLCEngine(modelId, {
      appConfig: prebuiltAppConfig,
      useWebWorker: false,   // main-thread mode (works on GH Pages + iframes)
      gpu: true
    }, (p)=> setStatus(`${escapeHtml(p.text)} ${Math.round(p.progress*100)}%`) );
    setStatus(`Loaded <b>${escapeHtml(modelId)}</b>. You’re good to go.`);
    sendBtn.disabled = false; inputEl.focus();
  } catch (e){
    setStatus(`Load error: ${escapeHtml(e.message)}. Try the smallest model or open in a desktop browser with WebGPU.`);
  }
});

async function send(){
  const text = inputEl.value.trim();
  if(!text || !engine) return;
  inputEl.value = ""; inputEl.focus(); sendBtn.disabled = true;
  addBubble("user", text);
  try{
    const msgs = history.concat([{ role:"user", content:text }]);
    const out = await engine.chat.completions.create({ messages: msgs, temperature: 0.2, max_tokens: 900 });
    const reply = out?.choices?.[0]?.message?.content ?? "No response.";
    history.push({ role:"user", content:text }); history.push({ role:"assistant", content:reply });
    addBubble("assistant", reply);
  }catch(e){ addBubble("assistant", `**Error:** ${escapeHtml(e.message)}`); }
  finally{ sendBtn.disabled = false; }
}

sendBtn.addEventListener("click", send);
inputEl.addEventListener("keydown", e=>{ if(e.key==="Enter" && !e.shiftKey){ e.preventDefault(); send(); }});
document.querySelectorAll(".chip").forEach(ch=> ch.addEventListener("click", ()=>{ inputEl.value = ch.dataset.text; inputEl.focus(); }));
</script>
</body>
</html>
